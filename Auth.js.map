{"version":3,"sources":["../src/Auth.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,sCAAmD;AACnD,sCAA8C;AAQ9C,mCAAuC;AACvC,6CAA4C;AAE5C,qCAAwC;AAKxC;IAA+B,6BAAW;IAExC,mBACS,WAAwB,EACxB,IAAU;QAFnB,YAIE,kBAAM,WAAW,EAAE,IAAI,CAAC,SACzB;QAJQ,iBAAW,GAAX,WAAW,CAAa;QACxB,UAAI,GAAJ,IAAI,CAAM;;IAGnB,CAAC;IAES,oCAAgB,GAA1B,UAA2B,OAAe;QACxC,MAAM,CAAC,iBAAM,gBAAgB,YAAC,OAAO,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,SAAS,EAAE,cAAc,CAAC,CAAC;IAC7F,CAAC;IAED,+BAAW,GAAX,UAAY,WAAyB;QACnC,yBAAW,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC;IACvC,CAAC;IACD,8BAAU,GAAV;QACE,MAAM,CAAC,yBAAW,CAAC,UAAU,EAAE,CAAC;IAClC,CAAC;IACD,iCAAa,GAAb;QACE,yBAAW,CAAC,aAAa,EAAE,CAAC;IAC9B,CAAC;IAED,wBAAI,GAAJ,UAAK,eAAiC,EAAE,OAAoC;QAApC,wBAAA,EAAA,YAAY,OAAO,EAAE,IAAI,cAAO,EAAE,EAAE;QAC1E,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;YACrB,OAAO,CAAC,OAAO,GAAG,IAAI,cAAO,EAAE,CAAC;QAClC,CAAC;QACD,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,eAAe,EAAE,EAAE,CAAC,CAAC;QAC5C,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,eAAe,EAAE,OAAO,CAAC,CAAC;IAC3D,CAAC;IACD,4BAAQ,GAAR,UAAS,OAAY;QAAZ,wBAAA,EAAA,YAAY;QACnB,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,iBAAiB,EAAE,EAAE,EAAE,OAAO,CAAC,CAAC;IACvD,CAAC;IAEI,oBAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,iBAAU,EAAE;KACnB,CAAC;IAEK,wBAAc,GAAmE,cAAM,OAAA;QAC9F,EAAC,IAAI,EAAE,qBAAW,GAAG;QACrB,EAAC,IAAI,EAAE,WAAI,GAAG;KACb,EAH6F,CAG7F,CAAC;IACF,gBAAC;CA1CD,AA0CC,CA1C8B,oBAAW,GA0CzC;AA1CY,8BAAS","file":"Auth.js","sourceRoot":"","sourcesContent":["import { Injectable, Inject } from '@angular/core';\nimport { Headers, Http } from '@angular/http';\n\n// Need to import interfaces dependencies\n// Bug TypeScript https://github.com/Microsoft/TypeScript/issues/5938\nimport { Observable } from 'rxjs/Observable';\nimport { RequestOptionsArgs } from '@angular/http/src/interfaces';\nimport { Response } from '@angular/http/src/static_response';\n\nimport { WpApiParent } from './Parent';\nimport { AuthSession } from './AuthSession';\n\nimport { WpApiLoader } from './Loaders';\n\nimport { IWpApiAuth, ICredentials, IAuthCredentials } from './interfaces';\n\n\nexport class WpApiAuth extends WpApiParent implements IWpApiAuth {\n\n  constructor(\n    public wpApiLoader: WpApiLoader,\n    public http: Http,\n  ) {\n    super(wpApiLoader, http);\n  }\n\n  protected getWebServiceUrl(postfix: string): string {\n    return super.getWebServiceUrl(postfix).replace(this.wpApiLoader.namespace, '/jwt-auth/v1');\n  }\n\n  saveSession(credentials: ICredentials) {\n    AuthSession.saveSession(credentials);\n  }\n  getSession(): ICredentials {\n    return AuthSession.getSession();\n  }\n  removeSession() {\n    AuthSession.removeSession();\n  }\n\n  auth(authCredentials: IAuthCredentials, options = { headers: new Headers() }): Observable<Response> {\n    if (!options.headers) {\n      options.headers = new Headers();\n    }\n    options.headers.append('Authorization', '');\n    return this.httpPost(`/token`, authCredentials, options);\n  }\n  validate(options = {}): Observable<Response> {\n    return this.httpPost(`/token/validate`, {}, options);\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: WpApiLoader, },\n{type: Http, },\n];\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}